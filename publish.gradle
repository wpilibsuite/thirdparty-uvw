apply plugin: 'maven-publish'

publishing {
    repositories {
        maven {
            url "${System.getProperty('user.home')}/releases/maven/development"
        }
        maven {
            url "${System.getProperty('user.home')}/releases/maven/release"
        }
    }
}

def pubVersion = '1.8.1-1.20.3'

def baseArtifactId = 'uvw'
def artifactGroupId = 'edu.wpi.first.thirdparty.frc2018'
def zipBaseName = '_GROUP_edu_wpi_first_thirdparty_frc2018_ID_uvw_CLS'

def outputsFolder = file("$project.buildDir/outputs")

def versionFile = file("$outputsFolder/version.txt")

task outputVersions() {
    description = 'Prints the versions of this to a file for use by the downstream packaging project'
    group = 'Build'
    outputs.files(versionFile)

    doFirst {
        buildDir.mkdir()
        outputsFolder.mkdir()
    }

    doLast {
        versionFile.write pubVersion
    }
}

build.dependsOn outputVersions
copyAllOutputs.dependsOn outputVersions
copyAllOutputs.inputs.file versionFile
copyAllOutputs.from versionFile

task cSourcesZip(type: Zip) {
    destinationDir = outputsFolder
    baseName = zipBaseName
    classifier = "sources"

    from(licenseFile) {
        into '/'
    }

    from('libuv/src') {
        into '/'
    }

    from('include') {
        into '/'
    }
}

task cHeadersZip(type: Zip) {
    destinationDir = outputsFolder
    baseName = zipBaseName
    classifier = "headers"

    from(licenseFile) {
        into '/'
    }

    from('libuv/include/uv.h') {
        into '/'
        filter { String line -> line.replaceAll('uv-', 'uv-private/uv-').replaceAll('stdint-', 'uv-private/stdint-') }
    }

    from('libuv/include') {
        into '/uv-private/'
        exclude 'uv.h'
    }

    from('uvw/src') {
        into '/'
    }
}

build.dependsOn cHeadersZip
build.dependsOn cSourcesZip

addTaskToCopyAllOutputs(cHeadersZip)
addTaskToCopyAllOutputs(cSourcesZip)

model {
    publishing {
        def UvTaskList = createComponentZipTasks($.components, 'uv', zipBaseName, Zip, project, includeStandardZipFormat)
        def allTask
        if (!project.hasProperty('jenkinsBuild')) {
            allTask = createAllCombined(UvTaskList, 'uv', zipBaseName, Zip, project)
        }

        publications {
            c(MavenPublication) {
                UvTaskList.each {
                    artifact it
                }
                if (!project.hasProperty('jenkinsBuild')) {
                    artifact allTask
                }
                artifact cHeadersZip
                artifact cSourcesZip

                artifactId = baseArtifactId
                groupId artifactGroupId
                version pubVersion
            }
        }
    }
}
